Complete admin functionality - Text lecture
Section 5, Lecture 130
Update the setup method in chefs_listing_test.rb and then sign_in_as admin:

  def setup
    @chef = Chef.create!(chefname: "mashrur", 
                            email: "mashrur@example.com",
                        password: "password", 
                            password_confirmation: "password")
    @chef2 = Chef.create!(chefname: "john", 
                                email: "john@example.com",
                        password: "password", 
                                password_confirmation: "password")
    @admin_user = Chef.create!(chefname: "john1", 
                                  email: "john1@example.com",
                        password: "password", 
                      password_confirmation: "password", admin: true)                    
  end

  test "should delete chef" do
    sign_in_as(@admin_user, "password")
    get chefs_path
    assert_template 'chefs/index'
    assert_difference 'Chef.count', -1 do
      delete chef_path(@chef2)
    end
    assert_redirected_to chefs_path
    assert_not flash.empty?
  end

Add more tests, two examples test are given below, one for admin user being able to edit and the other unauthorized chef attempting to edit another chef's profile:
  def setup
    @chef = Chef.create!(chefname: "mashrur", 
                            email: "mashrur@example.com",
                          password: "password", 
                              password_confirmation: "password")
    @chef2 = Chef.create!(chefname: "john", 
                                  email: "john@example.com",
                        password: "password", 
                              password_confirmation: "password")
    @admin_user = Chef.create!(chefname: "john1", 
                                email: "john1@example.com",
                        password: "password", 
                      password_confirmation: "password", admin: true)                    
  end

  test "accept edit attempt by admin user" do
    sign_in_as(@admin_user, "password")
    get edit_chef_path(@chef)
    assert_template 'chefs/edit'
    patch chef_path(@chef), params: { chef: { chefname: "mashrur3", 
                                  email: "mashrur3@example.com" } }
    assert_redirected_to @chef
    assert_not flash.empty?
    @chef.reload
    assert_match "mashrur3", @chef.chefname
    assert_match "mashrur3@example.com", @chef.email
  end
  
  test "redirect edit attempt by another non-admin user" do
    sign_in_as(@chef2, "password")
    updated_name = "joe"
    updated_email = "joe@example.com"
    patch chef_path(@chef), params: { chef: { chefname: updated_name, 
                                  email: updated_email } }
    assert_redirected_to chefs_path
    assert_not flash.empty?
    @chef.reload
    assert_match "mashrur", @chef.chefname
    assert_match "mashrur@example.com", @chef.email
  end  

Make sure all your tests pass, then deploy to Heroku (production):
git push heroku master

Once deployed, run all your migrations in heroku:
heroku run rails db:migrate

Then start your heroku console and assign a user as admin user:
heroku run rails console

chef = Chef.find_by(email: "enter email of you want as admin")

set password for the chef

chef.password = "choose a password"

chef.save

chef.toggle!(:admin)

chef

Test it out from heroku

CONGRATULATIONS! now post your heroku app link to the Q & A of this course, also on your blog and share with friends and family!